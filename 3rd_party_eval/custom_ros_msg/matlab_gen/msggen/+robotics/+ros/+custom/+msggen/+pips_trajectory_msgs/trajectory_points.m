classdef trajectory_points < robotics.ros.Message
  %trajectory_points MATLAB implementation of pips_trajectory_msgs/trajectory_points
  %   This class was automatically generated by
  %   robotics.ros.msg.internal.gen.MessageClassGenerator.
  
  %   Copyright 2014-2018 The MathWorks, Inc.
  
  %#ok<*INUSD>
  
  properties (Constant)
    MessageType = 'pips_trajectory_msgs/trajectory_points' % The ROS message type
  end
  
  properties (Constant, Hidden)
    MD5Checksum = '0e147c86b6a00a2dea6684eeee7cb4dd' % The MD5 Checksum of the message definition
  end
  
  properties (Access = protected)
    JavaMessage % The Java message object
  end
  
  properties (Constant, Access = protected)
    PipsTrajectoryMsgsTrajectoryPointClass = robotics.ros.msg.internal.MessageFactory.getClassForType('pips_trajectory_msgs/trajectory_point') % Dispatch to MATLAB class for message type pips_trajectory_msgs/trajectory_point
    StdMsgsHeaderClass = robotics.ros.msg.internal.MessageFactory.getClassForType('std_msgs/Header') % Dispatch to MATLAB class for message type std_msgs/Header
  end
  
  properties (Dependent)
    Header
    Points
  end
  
  properties (Access = protected)
    Cache = struct('Header', [], 'Points', []) % The cache for fast data access
  end
  
  properties (Constant, Hidden)
    PropertyList = {'Header', 'Points'} % List of non-constant message properties
    ROSPropertyList = {'header', 'points'} % List of non-constant ROS message properties
  end
  
  methods
    function obj = trajectory_points(msg)
      %trajectory_points Construct the message object trajectory_points
      import com.mathworks.toolbox.robotics.ros.message.MessageInfo;
      
      % Support default constructor
      if nargin == 0
        obj.JavaMessage = obj.createNewJavaMessage;
        return;
      end
      
      % Construct appropriate empty array
      if isempty(msg)
        obj = obj.empty(0,1);
        return;
      end
      
      % Make scalar construction fast
      if isscalar(msg)
        % Check for correct input class
        if ~MessageInfo.compareTypes(msg(1), obj.MessageType)
          error(message('robotics:ros:message:NoTypeMatch', obj.MessageType, ...
            char(MessageInfo.getType(msg(1))) ));
        end
        obj.JavaMessage = msg(1);
        return;
      end
      
      % Check that this is a vector of scalar messages. Since this
      % is an object array, use arrayfun to verify.
      if ~all(arrayfun(@isscalar, msg))
        error(message('robotics:ros:message:MessageArraySizeError'));
      end
      
      % Check that all messages in the array have the correct type
      if ~all(arrayfun(@(x) MessageInfo.compareTypes(x, obj.MessageType), msg))
        error(message('robotics:ros:message:NoTypeMatchArray', obj.MessageType));
      end
      
      % Construct array of objects if necessary
      objType = class(obj);
      for i = 1:length(msg)
        obj(i,1) = feval(objType, msg(i)); %#ok<AGROW>
      end
    end
    
    function header = get.Header(obj)
      %get.Header Get the value for property Header
      if isempty(obj.Cache.Header)
        obj.Cache.Header = feval(obj.StdMsgsHeaderClass, obj.JavaMessage.getHeader);
      end
      header = obj.Cache.Header;
    end
    
    function set.Header(obj, header)
      %set.Header Set the value for property Header
      validateattributes(header, {obj.StdMsgsHeaderClass}, {'nonempty', 'scalar'}, 'trajectory_points', 'Header');
      
      obj.JavaMessage.setHeader(header.getJavaObject);
      
      % Update cache if necessary
      if ~isempty(obj.Cache.Header)
        obj.Cache.Header.setJavaObject(header.getJavaObject);
      end
    end
    
    function points = get.Points(obj)
      %get.Points Get the value for property Points
      if isempty(obj.Cache.Points)
        javaArray = obj.JavaMessage.getPoints;
        array = obj.readJavaArray(javaArray, obj.PipsTrajectoryMsgsTrajectoryPointClass);
        obj.Cache.Points = feval(obj.PipsTrajectoryMsgsTrajectoryPointClass, array);
      end
      points = obj.Cache.Points;
    end
    
    function set.Points(obj, points)
      %set.Points Set the value for property Points
      if ~isvector(points) && isempty(points)
        % Allow empty [] input
        points = feval([obj.PipsTrajectoryMsgsTrajectoryPointClass '.empty'], 0, 1);
      end
      
      validateattributes(points, {obj.PipsTrajectoryMsgsTrajectoryPointClass}, {'vector'}, 'trajectory_points', 'Points');
      
      javaArray = obj.JavaMessage.getPoints;
      array = obj.writeJavaArray(points, javaArray, obj.PipsTrajectoryMsgsTrajectoryPointClass);
      obj.JavaMessage.setPoints(array);
      
      % Update cache if necessary
      if ~isempty(obj.Cache.Points)
        obj.Cache.Points = [];
        obj.Cache.Points = obj.Points;
      end
    end
  end
  
  methods (Access = protected)
    function resetCache(obj)
      %resetCache Resets any cached properties
      obj.Cache.Header = [];
      obj.Cache.Points = [];
    end
    
    function cpObj = copyElement(obj)
      %copyElement Implements deep copy behavior for message
      
      % Call default copy method for shallow copy
      cpObj = copyElement@robotics.ros.Message(obj);
      
      % Clear any existing cached properties
      cpObj.resetCache;
      
      % Create a new Java message object
      cpObj.JavaMessage = obj.createNewJavaMessage;
      
      % Recursively copy compound properties
      cpObj.Header = copy(obj.Header);
      cpObj.Points = copy(obj.Points);
    end
    
    function reload(obj, strObj)
      %reload Called by loadobj to assign properties
      obj.Header = feval([obj.StdMsgsHeaderClass '.loadobj'], strObj.Header);
      PointsCell = arrayfun(@(x) feval([obj.PipsTrajectoryMsgsTrajectoryPointClass '.loadobj'], x), strObj.Points, 'UniformOutput', false);
      obj.Points = vertcat(PointsCell{:});
    end
  end
  
  methods (Access = ?robotics.ros.Message)
    function strObj = saveobj(obj)
      %saveobj Implements saving of message to MAT file
      
      % Return an empty element if object array is empty
      if isempty(obj)
        strObj = struct.empty;
        return
      end
      
      strObj.Header = saveobj(obj.Header);
      strObj.Points = arrayfun(@(x) saveobj(x), obj.Points);
    end
  end
  
  methods (Static, Access = {?matlab.unittest.TestCase, ?robotics.ros.Message})
    function obj = loadobj(strObj)
      %loadobj Implements loading of message from MAT file
      
      % Return an empty object array if the structure element is not defined
      if isempty(strObj)
        obj = robotics.ros.custom.msggen.pips_trajectory_msgs.trajectory_points.empty(0,1);
        return
      end
      
      % Create an empty message object
      obj = robotics.ros.custom.msggen.pips_trajectory_msgs.trajectory_points;
      obj.reload(strObj);
    end
  end
end
